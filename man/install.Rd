% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install.R
\name{install}
\alias{install}
\title{Install the Michigan Data Interface (MDI) code repositories and dependencies}
\usage{
install(
  mdiDir = "~",
  hostDir = NULL,
  installPackages = TRUE,
  confirm = TRUE,
  clone = TRUE,
  cranRepo = "https://repo.miserver.it.umich.edu/cran/",
  packages = NULL,
  force = FALSE,
  checkout = NULL
)
}
\arguments{
\item{mdiDir}{character. Path to the directory where the MDI will be/has 
been installed. Defaults to your home directory, such that the MDI will 
be installed into '~/mdi' by default.}

\item{hostDir}{character. Path to the directory where a hosted, i.e., a 
shared public, installation of the MDI can be found. If not NULL (the default),
the only action taken will be to clone or update copies of the pipelines and  
apps suites specified in \code{hostDir}/config/suites.yml, which also forces 
\code{installPackages} to FALSE. The purpose of setting hostDir for 
\code{mdi::install()} is mainly to prepare to execute hosted Stage 1 pipelines.}

\item{installPackages}{logical. If TRUE (the default), \code{mdi::install()} 
will fully install both Stage 1 Pipelines and Stage 2 Apps. If you know you  
will only want to use Stage 1 Pipelines from your installation, or if you 
will always use \code{mdi::run()} option \code{hostDir} to run the Stage 2  
Apps server with code sourced from a shared MDI installation, then setting 
\code{installPackages} to FALSE will skip the much slower installation of  
the Stage 2 R packages library.}

\item{confirm}{logical. If TRUE (the default) and in interactive mode,
\code{mdi::install()} will list all actions to be taken and prompt for 
permission before creating or modifying any system files.}

\item{clone}{logical. If TRUE (the default), the apps and pipelines code 
repositories will be cloned anew from GitHub if they do not already exist, 
or they will be pulled from the server to update a repository if they have been 
cloned previously. Developers might want to set this option to FALSE.}

\item{cranRepo}{character. The base URL of the R repository to use, e.g., the
URL of a CRAN mirror. Defaults to the University of Michigan CRAN mirror.}

\item{packages}{character vector. If not NULL (the default), only install
these specific R packages (for developers to quickly update selected
packages). No other actions will be taken and the library's installation.rds
file will not be updated.}

\item{force}{logical.  When FALSE (the default), \code{mdi::install()}
does not attempt to update R packages that have previously been installed,
regardless of version. When TRUE, all packages are installed without further
prompting.}

\item{checkout}{list.  When not NULL (the default), a list of version tags, 
branch names, or git commit identifiers to check out prior to installing 
Stage 2 R packages, of form 
\code{list(framework = "v0.0.0", suites = list(<suiteName> = "v0.0.0", ...))}
where framework refers to the mdi-apps-framework. If \code{checkout} or the 
list entry for a git repository is NULL or NA, the latest release tag will 
be checked out prior to installation (ignored for developer-forks of git repos). 
Finally, if \code{checkout} is FALSE, no git checkout actions will be taken.}
}
\value{
A list of installation data with names components 'versions', dirs', 
'repos', 'rRepos', 'packages'. This information will be incomplete if 
\code{packages} was not NULL (repos and rRepos will be NULL, packages will  
only contain\code{packages}) or if installPackages was FALSE (repos, rRepos  
and packages will all be NULL).
}
\description{
Install all dependencies of the Michigan Data Interface (MDI). This will 
include Bioconductor's BiocManager and its child packages, as well as a 
series of Git repositories cloned from GitHub.
}
\details{
No action will be taken unless approved by the user when prompted.

All default settings are consistent with an end user running the MDI in 
local mode on their desktop or laptop computer.

All components will be install into directory \code{mdiDir}. 
\code{mdiDir} must already exist, it will not be created. 
If \code{mdiDir} ends with '/mdi' it will be used as is. Otherwise, 
a subdirectory of that name will be created in \code{mdiDir}.

If they do not already exist, \code{mdi::install()} will create a series 
of subdirectories in \code{mdiDir}, as follows:
\itemize{
  \item config = configuration data for the MDI installation
  \item containers = Singularity container images for suites that use them
  \item data = project-specific input and output files
  \item environments = conda environments used by data analysis pipelines
  \item frameworks = git repositories with common code for all pipelines and apps
  \item library = version-controlled library of R packages private to the MDI
  \item remote = scripts to help run the MDI in remote modes
  \item resources = version-controlled ~static files such as reference data sets
  \item sessions = temporary files associated with user web sessions
  \item suites = git repositories with code that defines specific pipelines and apps
}

If access to private repositories or developer forks is needed, you must
create script 'gitCredentials.R' in \code{mdiDir} or your home directory, 
to be sourced by \code{mdi::install()}, with the following contents:
gitCredentials <- list(
    USER_NAME  = "First Last",
    USER_EMAIL = "lastf@example.com",
    GIT_USER   = "xxx",
    GITHUB_PAT = "xxx"
)
where GIT_USER and GITHUB_PAT are the username and Personal Access 
Token of a GitHub account that holds any developer forks and/or grants
permissions for accessing any tool suites that have restricted access.
You should protect gitCredentials.R by removing read permissions for 
anyone except yourself. If you are uncomfortable storing sensitive
information on disk, you may alternatively set gitCredentials values  
in the environment using Sys.setenv(GITHUB_PAT = "xxx"), etc., prior to
calling \code{mdi::install()}.
}
