#!/bin/bash

# the main executable command line script that 
#   - establishes the job manager (Stage 1)
#   - makes calls that execute pipelines (Stage 1)
#   - provides a command line shortcut to mdi::run(), etc. (Stage 2)
#   - enables easy re-installation to add suites, etc. 

#----------------------------------------------------------------------
# base directory of the MDI installation
#----------------------------------------------------------------------
export MDI_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

#----------------------------------------------------------------------
# --develop and --help arguments to the mdi command itself
# if both used, --develop must precede --help
#----------------------------------------------------------------------
export DEVELOPER_MODE=""
TARGET=$1
if [[ "$TARGET" = "-d" || "$TARGET" = "--develop" ]]; then 
    export DEVELOPER_MODE="TRUE"
    shift    
    TARGET=$1
    DEVELOPER_FLAG="-d"
fi
if [[ "$TARGET" = "-h" ||  "$TARGET" = "--help" ]]; then 
    TARGET=""
fi

#----------------------------------------------------------------------
# parse job manager and pipeline paths
#----------------------------------------------------------------------

# use developer fork of mdi-pipelines-framework if present and in developer mode
export FRAMEWORK_DIR=$MDI_DIR/frameworks/developer-forks/mdi-pipelines-framework
if [[ ! -d $FRAMEWORK_DIR || "$DEVELOPER_MODE" != "TRUE" ]]; then 
    export FRAMEWORK_DIR=$MDI_DIR/frameworks/definitive/mdi-pipelines-framework
fi

# set script paths
export JOB_MANAGER_DIR=$FRAMEWORK_DIR/job_manager
JOB_MANAGER_TARGET=$JOB_MANAGER_DIR/jobManager
Q_TYPE_FILE=$JOB_MANAGER_DIR/qType
JOB_MANAGER_COMMANDS=$(cd $JOB_MANAGER_DIR/lib/commands && ls -1 *.pl |  cut -d '.' -f 1 | tr '\n' ' ') 

# set known pipelines
export PIPELINE_DIRS=`ls -d $MDI_DIR/suites/*/*/pipelines/*/ 2>/dev/null`

#----------------------------------------------------------------------
# support inverted call format, i.e., 'mdi data.yml COMMAND'
#----------------------------------------------------------------------
if [[ "$TARGET" = *.yml && -e $TARGET ]]; then
    shift
    if [ "$1" = "" ]; then
        echo -e "\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo "missing command"
        echo -e "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        exec $JOB_MANAGER_TARGET
    else 
        exec $MDI_DIR/mdi $DEVELOPER_FLAG $@ $TARGET    
    fi
fi

#----------------------------------------------------------------------
# handle a direct call to initialize the job manager
#----------------------------------------------------------------------
if [ "$TARGET" = "initialize" ]; then
    exec perl $JOB_MANAGER_DIR/initialize.pl $MDI_DIR

#----------------------------------------------------------------------
# handle job manager functions (submit, report, etc.)
# also handle mdi called with no arguments, i.e. a help request
#----------------------------------------------------------------------
elif [[ "$TARGET" = "" || " $JOB_MANAGER_COMMANDS " =~ " $TARGET " ]]; then
    
    # ensure that the job manager target script has been initialized
    Q_TYPE=""
    if [ -e "$Q_TYPE_FILE" ]; then
        Q_TYPE=`cat $Q_TYPE_FILE` # recovers cases when job scheduler wasn't discovered in prior initialize
    fi
    if [[ ! -e "$JOB_MANAGER_TARGET" || "$Q_TYPE" = "" ]]; then
        perl $JOB_MANAGER_DIR/initialize.pl $MDI_DIR suppressLog
    fi    

    # fork the call to the job manager utility (a close relative of 'q')
    if [ -e "$JOB_MANAGER_TARGET" ]; then
        if [ "$TARGET" = "" ]; then
            exec $JOB_MANAGER_TARGET # various routes to top-level mdi help
        else 
            exec $JOB_MANAGER_TARGET "$@" # job manager call with a specified target
        fi
    fi

#----------------------------------------------------------------------
# capture and pass calls to a pipeline when using job manager as a surrogate
# thus, pipelines cannot have the same name as a job manager command (submit, report, etc.)
# launcher.pl handles pipeline target/mdi command errors
#----------------------------------------------------------------------
else
    exec perl $FRAMEWORK_DIR/pipeline/launcher/launcher.pl $@ 
fi
